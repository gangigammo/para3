--------------------------

学籍番号 : 16B16163
氏名 : 吉川純平

--------------------------

回答1 :
1.1) OrderedShapeManagerの実装についての説明
利用したクラスについてや、最小限の実装行で済ませる工夫などを説明して下さい。
Collections.sort((List)data, new Comparator<Shape>() { ... }
で、AbstructCollectionクラスのdataをList型に型キャストし、Comparatorクラスを定義し、Shape.idの順に図形を出力するようにした。




1.2)
空欄Aに入る語は：カプセル化
空欄Bに入る語は：スレッドセーフ




回答２ :
2.1) para.Main05のメンバ変数valueに直接関連した処理を行うスレッド名と
その役割はそれぞれ次のとおり

スレッド名   | 役割
---------------------------------
Thread-3  現在の値でモグラを出力する。
JavaFX Application Thread　スライダーを動かしたときにモグラの値を書き込む。


2.2)
ユーザ視点でのプログラムの不具合
スライダーの値とモグラの大きさが一対一に対応しなくなってしまう。


不具合の原因についての講義で説明されたプログラムを処理する仕組みに基づいた説明
JavaFX Application Threadでスライダーを動かしたことを感知した後、その値をモグラの大きさの値に代入し、Threadでモグラの大きさを変更しようとするときに、
スライダーの操作により、JavaFX Application Threadで、モグラの大きさの値を変更してしまうから。




回答3 :
3.1)
配布されたpara.Main06による仕様のように動かない挙動の説明
(windowsの場合は、別ウィンドウを操作しているときなどにはのみ、値がまちまちになる。)
macでは、incrementの数値がdecrementの数値になってしまったり、逆のことが起きてしまうことがあることがある。
原因としては、二つのShapeManagerが同じ変数Shapeを使っているから、片方のShapeManagerがShapeを読み込む前にもう片方のShapeManagerがShapeを変更してしまうからである。


3.2)
つぎのどちらかの行を消して回答せよ
メソッドduplicate()は shallow copy である。

スレッドセーフであると考える場合、その理由の説明
スレッドセーフである条件の一つが、「非共有ならば参照に同期がとられている」であり、sm2はshallow copyであるが、shapemanagerの値を参照する関数にはsynchronized
であり、参照に同期がとられているから、スレッドセーフである。






回答4 :
4.1)
２つのスレッド  JavaFX Application Thread、Thread-3 
１つ目のスレッドとその役割は次のとおり
キー入力の値や、マウスクリックの座標を読み込むためのスレッド。



２つ目のスレッドとその役割は次のとおり
モグラの大きさを読み込み表示する役割。



4.2)
para.game.GameFrameのメンバ変数xyについてsynchronizedメソッドによる同
期を行わなかった場合に生じる不正確なデータの処理の例は次のとおり
マウスを高速で２回クリックしたときに、前のクリックの値を読み込む前に、２回目の座標に書き換わってしまう。




volatile修飾では不十分であることの理由
xyの値をコピーするときや、xyの値を得るときに、xyの値を参照しているが、その要素の参照先の最新性が保証されていないから。





4.3)
para.game.GameFrameのメンバ変数leftonやrightonにvolatile修飾を付けるこ
とでマルチスレッドに対応できることの説明
leftonや、rightonは参照型でないため、deepcopyにしかならないから。






4.4)
ゲーム性を高めるために行った実装についての説明
得点ルールとその計算法の実装
モグラをクリックできたらscoreに１点足される。InsideCheckerを用い、モグラにあたったかで場合分けをしている。


得点を表示するために行った実装
ism.put()で、図形Digitを出力できるようにしている。


課題3で表示される図形を利用するための実装
Garden.setMole(10+i*10, (i%XCOUNT)*130+60, (i/XCOUNT)*130+60,slot[i]/25,osm);
で、モグラを出力している。


ゲームの終了条件を定めるための実装...
得点が100点になったら終了させるようにした。
